#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–∞—Ö
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python list_tests.py [test_id]
"""

import sys
from sqlalchemy.orm import Session
from database import engine
from models.test import Test
from models.question import Question
from models.category import Category

def list_all_tests():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    with Session(engine) as db:
        tests = db.query(Test).all()
        
        if not tests:
            print("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.")
            return
        
        print("\n" + "="*60)
        print("üìã –°–ü–ò–°–û–ö –í–°–ï–• –¢–ï–°–¢–û–í")
        print("="*60)
        
        for test in tests:
            questions_count = db.query(Question).filter(Question.test_id == test.id).count()
            
            print(f"\nüÜî ID: {test.id}")
            print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test.title}")
            print(f"üìä –í–æ–ø—Ä–æ—Å–æ–≤: {questions_count}")
            
            if test.description:
                print(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {test.description}")
            
            print(f"üìÖ –°–æ–∑–¥–∞–Ω: {test.created_at}")
            print(f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å ID: {test.created_by}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            if questions_count > 0:
                categories = db.query(Category).join(Question).filter(Question.test_id == test.id).distinct().all()
                if categories:
                    print(f"üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([cat.name for cat in categories])}")
            
            print("-" * 40)

def show_test_details(test_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–µ—Å—Ç–µ"""
    with Session(engine) as db:
        test = db.query(Test).filter(Test.id == test_id).first()
        
        if not test:
            print(f"‚ùå –¢–µ—Å—Ç —Å ID {test_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        questions = db.query(Question).filter(Question.test_id == test_id).all()
        
        print("\n" + "="*60)
        print(f"üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–°–¢–ï")
        print("="*60)
        
        print(f"\nüÜî ID: {test.id}")
        print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test.title}")
        print(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {test.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}")
        print(f"üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {test.created_at}")
        print(f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å ID: {test.created_by}")
        
        if questions:
            print(f"\nüìù –í–û–ü–†–û–°–´:")
            print("-" * 40)
            
            for i, question in enumerate(questions, 1):
                category = db.query(Category).filter(Category.id == question.category_id).first()
                print(f"\n{i}. {question.text}")
                print(f"   üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question.correct_answer}")
                print(f"   üìã –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(question.options)}")
                
                if question.image_url:
                    print(f"   üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {question.image_url}")
                
                if question.table_data:
                    print(f"   üìä –¢–∞–±–ª–∏—Ü–∞: –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ")
        else:
            print(f"\n‚ùå –í —Ç–µ—Å—Ç–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")

def show_test_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º"""
    with Session(engine) as db:
        tests = db.query(Test).all()
        
        if not tests:
            print("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.")
            return
        
        total_questions = db.query(Question).count()
        total_categories = db.query(Category).count()
        
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–¢–§–û–†–ú–´")
        print("="*60)
        
        print(f"\nüìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(tests)}")
        print(f"‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        print(f"üè∑Ô∏è  –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        categories = db.query(Category).all()
        for category in categories:
            questions_count = db.query(Question).filter(Question.category_id == category.id).count()
            if questions_count > 0:
                print(f"   {category.name}: {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç
        largest_test = None
        max_questions = 0
        for test in tests:
            questions_count = db.query(Question).filter(Question.test_id == test.id).count()
            if questions_count > max_questions:
                max_questions = questions_count
                largest_test = test
        
        if largest_test:
            print(f"\nüèÜ –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç: {largest_test.title} ({max_questions} –≤–æ–ø—Ä–æ—Å–æ–≤)")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        try:
            test_id = int(sys.argv[1])
            show_test_details(test_id)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–µ—Å—Ç–∞!")
            sys.exit(1)
    else:
        list_all_tests()
        show_test_statistics() 