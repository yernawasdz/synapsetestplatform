#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ—Å—Ç–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python bulk_upload_with_test_selection.py <csv_file> [test_id]
"""

import csv
import sys
import os
from sqlalchemy.orm import Session
from database import engine, Base
from models.question import Question
from models.category import Category
from models.test import Test
from models.user import User

def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    Base.metadata.create_all(bind=engine)

def list_existing_tests():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
    with Session(engine) as db:
        tests = db.query(Test).all()
        if not tests:
            print("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.")
            return []
        
        print("\n=== –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã ===")
        for test in tests:
            questions_count = db.query(Question).filter(Question.test_id == test.id).count()
            print(f"ID: {test.id} | –ù–∞–∑–≤–∞–Ω–∏–µ: {test.title} | –í–æ–ø—Ä–æ—Å–æ–≤: {questions_count}")
            if test.description:
                print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {test.description}")
            print(f"  –°–æ–∑–¥–∞–Ω: {test.created_at}")
            print()
        
        return tests

def get_or_create_category(db: Session, category_name: str) -> Category:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    category = db.query(Category).filter(Category.name == category_name).first()
    if not category:
        category = Category(name=category_name)
        db.add(category)
        db.commit()
        db.refresh(category)
    return category

def get_test_by_id(test_id: int) -> Test:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ—Å—Ç –ø–æ ID"""
    with Session(engine) as db:
        test = db.query(Test).filter(Test.id == test_id).first()
        return test

def create_new_test(title: str, description: str = None, teacher_id: int = 1) -> Test:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Å—Ç"""
    with Session(engine) as db:
        test = Test(title=title, description=description, created_by=teacher_id)
        db.add(test)
        db.commit()
        db.refresh(test)
        return test

def upload_questions_to_test(csv_file_path: str, test_id: int):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
    
    Args:
        csv_file_path: –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        test_id: ID —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    """
    
    create_tables()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
    test = get_test_by_id(test_id)
    if not test:
        print(f"–û—à–∏–±–∫–∞: –¢–µ—Å—Ç —Å ID {test_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç: {test.title} (ID: {test.id})")
    
    with Session(engine) as db:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            
            questions_added = 0
            for row_num, row in enumerate(reader, 1):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    category = get_or_create_category(db, row['category'])
                    
                    # –ü–∞—Ä—Å–∏–º options –∏–∑ —Å—Ç—Ä–æ–∫–∏ JSON
                    import json
                    options = json.loads(row['options'].replace("'", '"'))
                    
                    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
                    question = Question(
                        test_id=test.id,
                        category_id=category.id,
                        text=row['text'],
                        options=options,
                        correct_answer=row['correct_answer'],
                        image_url=row['image_url'] if row['image_url'] else None,
                        table_data=json.loads(row['table_data']) if row['table_data'] else None
                    )
                    
                    db.add(question)
                    questions_added += 1
                    print(f"–î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å {row_num}: {row['text'][:50]}...")
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_num}: {e}")
                    continue
            
            db.commit()
            print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_added}")
            print(f"üìù –¢–µ—Å—Ç: {test.title}")
            print(f"üÜî ID —Ç–µ—Å—Ç–∞: {test.id}")
            
            return True

def interactive_test_selection():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞"""
    tests = list_existing_tests()
    
    if not tests:
        print("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç? (y/n): ", end="")
        choice = input().lower()
        if choice == 'y':
            print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞: ", end="")
            title = input().strip()
            print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ", end="")
            description = input().strip() or None
            
            test = create_new_test(title, description)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç: {test.title} (ID: {test.id})")
            return test.id
        else:
            print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return None
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç")
        print("2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            test_id = input("–í–≤–µ–¥–∏—Ç–µ ID —Ç–µ—Å—Ç–∞: ").strip()
            try:
                test_id = int(test_id)
                test = get_test_by_id(test_id)
                if test:
                    return test_id
                else:
                    print(f"‚ùå –¢–µ—Å—Ç —Å ID {test_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–µ—Å—Ç–∞!")
        
        elif choice == "2":
            print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞: ", end="")
            title = input().strip()
            print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ", end="")
            description = input().strip() or None
            
            test = create_new_test(title, description)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç: {test.title} (ID: {test.id})")
            return test.id
        
        elif choice == "3":
            print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return None
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python bulk_upload_with_test_selection.py <csv_file> [test_id]")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python bulk_upload_with_test_selection.py questions.csv")
        print("  python bulk_upload_with_test_selection.py questions.csv 1")
        sys.exit(1)
    
    csv_file = sys.argv[1]
    test_id = int(sys.argv[2]) if len(sys.argv) > 2 else None
    
    if not os.path.exists(csv_file):
        print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    # –ï—Å–ª–∏ test_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
    if test_id is None:
        test_id = interactive_test_selection()
        if test_id is None:
            sys.exit(0)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    success = upload_questions_to_test(csv_file, test_id)
    if success:
        print("\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ!")
        sys.exit(1) 